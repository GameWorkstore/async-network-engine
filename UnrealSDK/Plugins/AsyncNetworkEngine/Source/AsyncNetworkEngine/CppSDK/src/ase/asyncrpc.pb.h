// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asyncrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_asyncrpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_asyncrpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_asyncrpc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_asyncrpc_2eproto {
  static const ::uint32_t offsets[];
};
namespace GameWorkstore {
namespace AsyncNetworkEngine {
class GenericErrorResponse;
struct GenericErrorResponseDefaultTypeInternal;
extern GenericErrorResponseDefaultTypeInternal _GenericErrorResponse_default_instance_;
class GenericRequest;
struct GenericRequestDefaultTypeInternal;
extern GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
class GenericResponse;
struct GenericResponseDefaultTypeInternal;
extern GenericResponseDefaultTypeInternal _GenericResponse_default_instance_;
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore
PROTOBUF_NAMESPACE_OPEN
template <>
::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse* Arena::CreateMaybeMessage<::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse>(Arena*);
template <>
::GameWorkstore::AsyncNetworkEngine::GenericRequest* Arena::CreateMaybeMessage<::GameWorkstore::AsyncNetworkEngine::GenericRequest>(Arena*);
template <>
::GameWorkstore::AsyncNetworkEngine::GenericResponse* Arena::CreateMaybeMessage<::GameWorkstore::AsyncNetworkEngine::GenericResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace GameWorkstore {
namespace AsyncNetworkEngine {
enum Transmission : int {
  NotSpecified = 0,
  ErrorConnection = 1,
  ErrorProtocol = 2,
  ErrorParser = 3,
  Success = 200,
  ErrorNoData = 204,
  ErrorDecode = 400,
  ErrorUnauthorized = 401,
  ErrorForbidden = 403,
  ErrorMethodNotAllowed = 405,
  ErrorRequestTimeout = 408,
  ErrorEncode = 421,
  ErrorInternalServer = 500,
  ErrorNotImplemented = 501,
  ErrorNetworkAuthenticationRequired = 511,
  Transmission_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Transmission_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Transmission_IsValid(int value);
constexpr Transmission Transmission_MIN = static_cast<Transmission>(0);
constexpr Transmission Transmission_MAX = static_cast<Transmission>(511);
constexpr int Transmission_ARRAYSIZE = 511 + 1;
const std::string& Transmission_Name(Transmission value);
template <typename T>
const std::string& Transmission_Name(T value) {
  static_assert(std::is_same<T, Transmission>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Transmission_Name().");
  return Transmission_Name(static_cast<Transmission>(value));
}
const std::string& Transmission_Name(Transmission value);
bool Transmission_Parse(absl::string_view name, Transmission* value);

// ===================================================================


// -------------------------------------------------------------------

class GenericRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameWorkstore.AsyncNetworkEngine.GenericRequest) */ {
 public:
  inline GenericRequest() : GenericRequest(nullptr) {}
  ~GenericRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenericRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericRequest(const GenericRequest& from);
  GenericRequest(GenericRequest&& from) noexcept
    : GenericRequest() {
    *this = ::std::move(from);
  }

  inline GenericRequest& operator=(const GenericRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericRequest& operator=(GenericRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GenericRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericRequest* internal_default_instance() {
    return reinterpret_cast<const GenericRequest*>(
               &_GenericRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericRequest& a, GenericRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GenericRequest& from);
  void MergeFrom(const GenericRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "GameWorkstore.AsyncNetworkEngine.GenericRequest";
  }
  protected:
  explicit GenericRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessegeFieldNumber = 1,
  };
  // string Messege = 1;
  void clear_messege() ;
  const std::string& messege() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messege(Arg_&& arg, Args_... args);
  std::string* mutable_messege();
  PROTOBUF_NODISCARD std::string* release_messege();
  void set_allocated_messege(std::string* ptr);

  private:
  const std::string& _internal_messege() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messege(
      const std::string& value);
  std::string* _internal_mutable_messege();

  public:
  // @@protoc_insertion_point(class_scope:GameWorkstore.AsyncNetworkEngine.GenericRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messege_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_asyncrpc_2eproto;
};// -------------------------------------------------------------------

class GenericResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameWorkstore.AsyncNetworkEngine.GenericResponse) */ {
 public:
  inline GenericResponse() : GenericResponse(nullptr) {}
  ~GenericResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenericResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericResponse(const GenericResponse& from);
  GenericResponse(GenericResponse&& from) noexcept
    : GenericResponse() {
    *this = ::std::move(from);
  }

  inline GenericResponse& operator=(const GenericResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericResponse& operator=(GenericResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GenericResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericResponse* internal_default_instance() {
    return reinterpret_cast<const GenericResponse*>(
               &_GenericResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericResponse& a, GenericResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GenericResponse& from);
  void MergeFrom(const GenericResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "GameWorkstore.AsyncNetworkEngine.GenericResponse";
  }
  protected:
  explicit GenericResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessegeFieldNumber = 2,
  };
  // string Messege = 2;
  void clear_messege() ;
  const std::string& messege() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messege(Arg_&& arg, Args_... args);
  std::string* mutable_messege();
  PROTOBUF_NODISCARD std::string* release_messege();
  void set_allocated_messege(std::string* ptr);

  private:
  const std::string& _internal_messege() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messege(
      const std::string& value);
  std::string* _internal_mutable_messege();

  public:
  // @@protoc_insertion_point(class_scope:GameWorkstore.AsyncNetworkEngine.GenericResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messege_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_asyncrpc_2eproto;
};// -------------------------------------------------------------------

class GenericErrorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse) */ {
 public:
  inline GenericErrorResponse() : GenericErrorResponse(nullptr) {}
  ~GenericErrorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenericErrorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericErrorResponse(const GenericErrorResponse& from);
  GenericErrorResponse(GenericErrorResponse&& from) noexcept
    : GenericErrorResponse() {
    *this = ::std::move(from);
  }

  inline GenericErrorResponse& operator=(const GenericErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericErrorResponse& operator=(GenericErrorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GenericErrorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericErrorResponse* internal_default_instance() {
    return reinterpret_cast<const GenericErrorResponse*>(
               &_GenericErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenericErrorResponse& a, GenericErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericErrorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericErrorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericErrorResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GenericErrorResponse& from);
  void MergeFrom(const GenericErrorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericErrorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "GameWorkstore.AsyncNetworkEngine.GenericErrorResponse";
  }
  protected:
  explicit GenericErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string Error = 1;
  void clear_error() ;
  const std::string& error() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* ptr);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_asyncrpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenericRequest

// string Messege = 1;
inline void GenericRequest::clear_messege() {
  _impl_.messege_.ClearToEmpty();
}
inline const std::string& GenericRequest::messege() const {
  // @@protoc_insertion_point(field_get:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
  return _internal_messege();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenericRequest::set_messege(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.messege_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}
inline std::string* GenericRequest::mutable_messege() {
  std::string* _s = _internal_mutable_messege();
  // @@protoc_insertion_point(field_mutable:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
  return _s;
}
inline const std::string& GenericRequest::_internal_messege() const {
  return _impl_.messege_.Get();
}
inline void GenericRequest::_internal_set_messege(const std::string& value) {
  ;


  _impl_.messege_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericRequest::_internal_mutable_messege() {
  ;
  return _impl_.messege_.Mutable( GetArenaForAllocation());
}
inline std::string* GenericRequest::release_messege() {
  // @@protoc_insertion_point(field_release:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
  return _impl_.messege_.Release();
}
inline void GenericRequest::set_allocated_messege(std::string* value) {
  _impl_.messege_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messege_.IsDefault()) {
          _impl_.messege_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}

// -------------------------------------------------------------------

// GenericResponse

// string Messege = 2;
inline void GenericResponse::clear_messege() {
  _impl_.messege_.ClearToEmpty();
}
inline const std::string& GenericResponse::messege() const {
  // @@protoc_insertion_point(field_get:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
  return _internal_messege();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenericResponse::set_messege(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.messege_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}
inline std::string* GenericResponse::mutable_messege() {
  std::string* _s = _internal_mutable_messege();
  // @@protoc_insertion_point(field_mutable:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
  return _s;
}
inline const std::string& GenericResponse::_internal_messege() const {
  return _impl_.messege_.Get();
}
inline void GenericResponse::_internal_set_messege(const std::string& value) {
  ;


  _impl_.messege_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericResponse::_internal_mutable_messege() {
  ;
  return _impl_.messege_.Mutable( GetArenaForAllocation());
}
inline std::string* GenericResponse::release_messege() {
  // @@protoc_insertion_point(field_release:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
  return _impl_.messege_.Release();
}
inline void GenericResponse::set_allocated_messege(std::string* value) {
  _impl_.messege_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messege_.IsDefault()) {
          _impl_.messege_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}

// -------------------------------------------------------------------

// GenericErrorResponse

// string Error = 1;
inline void GenericErrorResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& GenericErrorResponse::error() const {
  // @@protoc_insertion_point(field_get:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenericErrorResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}
inline std::string* GenericErrorResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
  return _s;
}
inline const std::string& GenericErrorResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void GenericErrorResponse::_internal_set_error(const std::string& value) {
  ;


  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericErrorResponse::_internal_mutable_error() {
  ;
  return _impl_.error_.Mutable( GetArenaForAllocation());
}
inline std::string* GenericErrorResponse::release_error() {
  // @@protoc_insertion_point(field_release:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
  return _impl_.error_.Release();
}
inline void GenericErrorResponse::set_allocated_error(std::string* value) {
  _impl_.error_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::GameWorkstore::AsyncNetworkEngine::Transmission> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_asyncrpc_2eproto_2epb_2eh
