// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asyncrpc.proto

#include "asyncrpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace GameWorkstore {
namespace AsyncNetworkEngine {
template <typename>
PROTOBUF_CONSTEXPR GenericRequest::GenericRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messege_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenericRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericRequestDefaultTypeInternal() {}
  union {
    GenericRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenericResponse::GenericResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messege_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenericResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericResponseDefaultTypeInternal() {}
  union {
    GenericResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericResponseDefaultTypeInternal _GenericResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenericErrorResponse::GenericErrorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenericErrorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericErrorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericErrorResponseDefaultTypeInternal() {}
  union {
    GenericErrorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericErrorResponseDefaultTypeInternal _GenericErrorResponse_default_instance_;
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore
namespace GameWorkstore {
namespace AsyncNetworkEngine {
bool Transmission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 200:
    case 204:
    case 400:
    case 401:
    case 403:
    case 405:
    case 408:
    case 421:
    case 500:
    case 501:
    case 511:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Transmission_strings[15] = {};

static const char Transmission_names[] = {
    "ErrorConnection"
    "ErrorDecode"
    "ErrorEncode"
    "ErrorForbidden"
    "ErrorInternalServer"
    "ErrorMethodNotAllowed"
    "ErrorNetworkAuthenticationRequired"
    "ErrorNoData"
    "ErrorNotImplemented"
    "ErrorParser"
    "ErrorProtocol"
    "ErrorRequestTimeout"
    "ErrorUnauthorized"
    "NotSpecified"
    "Success"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Transmission_entries[] =
    {
        {{&Transmission_names[0], 15}, 1},
        {{&Transmission_names[15], 11}, 400},
        {{&Transmission_names[26], 11}, 421},
        {{&Transmission_names[37], 14}, 403},
        {{&Transmission_names[51], 19}, 500},
        {{&Transmission_names[70], 21}, 405},
        {{&Transmission_names[91], 34}, 511},
        {{&Transmission_names[125], 11}, 204},
        {{&Transmission_names[136], 19}, 501},
        {{&Transmission_names[155], 11}, 3},
        {{&Transmission_names[166], 13}, 2},
        {{&Transmission_names[179], 19}, 408},
        {{&Transmission_names[198], 17}, 401},
        {{&Transmission_names[215], 12}, 0},
        {{&Transmission_names[227], 7}, 200},
};

static const int Transmission_entries_by_number[] = {
    13,  // 0 -> NotSpecified
    0,  // 1 -> ErrorConnection
    10,  // 2 -> ErrorProtocol
    9,  // 3 -> ErrorParser
    14,  // 200 -> Success
    7,  // 204 -> ErrorNoData
    1,  // 400 -> ErrorDecode
    12,  // 401 -> ErrorUnauthorized
    3,  // 403 -> ErrorForbidden
    5,  // 405 -> ErrorMethodNotAllowed
    11,  // 408 -> ErrorRequestTimeout
    2,  // 421 -> ErrorEncode
    4,  // 500 -> ErrorInternalServer
    8,  // 501 -> ErrorNotImplemented
    6,  // 511 -> ErrorNetworkAuthenticationRequired
};

const std::string& Transmission_Name(Transmission value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Transmission_entries, Transmission_entries_by_number,
          15, Transmission_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Transmission_entries, Transmission_entries_by_number, 15,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Transmission_strings[idx].get();
}

bool Transmission_Parse(absl::string_view name, Transmission* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Transmission_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<Transmission>(int_value);
  }
  return success;
}
// ===================================================================

class GenericRequest::_Internal {
 public:
};

GenericRequest::GenericRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameWorkstore.AsyncNetworkEngine.GenericRequest)
}
GenericRequest::GenericRequest(const GenericRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messege_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.messege_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messege_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messege().empty()) {
    _this->_impl_.messege_.Set(from._internal_messege(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GameWorkstore.AsyncNetworkEngine.GenericRequest)
}

inline void GenericRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.messege_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messege_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messege_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericRequest::~GenericRequest() {
  // @@protoc_insertion_point(destructor:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messege_.Destroy();
}

void GenericRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messege_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Messege = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messege();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Messege = 1;
  if (!this->_internal_messege().empty()) {
    const std::string& _s = this->_internal_messege();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  return target;
}

::size_t GenericRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Messege = 1;
  if (!this->_internal_messege().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_messege());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericRequest*>(
      &from));
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
  GenericRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_messege().empty()) {
    _this->_internal_set_messege(from._internal_messege());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {
  return true;
}

void GenericRequest::InternalSwap(GenericRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messege_, lhs_arena,
                                       &other->_impl_.messege_, rhs_arena);
}

std::string GenericRequest::GetTypeName() const {
  return "GameWorkstore.AsyncNetworkEngine.GenericRequest";
}

// ===================================================================

class GenericResponse::_Internal {
 public:
};

GenericResponse::GenericResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameWorkstore.AsyncNetworkEngine.GenericResponse)
}
GenericResponse::GenericResponse(const GenericResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messege_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.messege_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messege_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messege().empty()) {
    _this->_impl_.messege_.Set(from._internal_messege(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GameWorkstore.AsyncNetworkEngine.GenericResponse)
}

inline void GenericResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.messege_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messege_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messege_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericResponse::~GenericResponse() {
  // @@protoc_insertion_point(destructor:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messege_.Destroy();
}

void GenericResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messege_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Messege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_messege();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Messege = 2;
  if (!this->_internal_messege().empty()) {
    const std::string& _s = this->_internal_messege();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  return target;
}

::size_t GenericResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Messege = 2;
  if (!this->_internal_messege().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_messege());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericResponse*>(
      &from));
}

void GenericResponse::MergeFrom(const GenericResponse& from) {
  GenericResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_messege().empty()) {
    _this->_internal_set_messege(from._internal_messege());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericResponse::CopyFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericResponse::IsInitialized() const {
  return true;
}

void GenericResponse::InternalSwap(GenericResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messege_, lhs_arena,
                                       &other->_impl_.messege_, rhs_arena);
}

std::string GenericResponse::GetTypeName() const {
  return "GameWorkstore.AsyncNetworkEngine.GenericResponse";
}

// ===================================================================

class GenericErrorResponse::_Internal {
 public:
};

GenericErrorResponse::GenericErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
}
GenericErrorResponse::GenericErrorResponse(const GenericErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericErrorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
}

inline void GenericErrorResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenericErrorResponse::~GenericErrorResponse() {
  // @@protoc_insertion_point(destructor:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericErrorResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void GenericErrorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericErrorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericErrorResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Error = 1;
  if (!this->_internal_error().empty()) {
    const std::string& _s = this->_internal_error();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  return target;
}

::size_t GenericErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Error = 1;
  if (!this->_internal_error().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericErrorResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericErrorResponse*>(
      &from));
}

void GenericErrorResponse::MergeFrom(const GenericErrorResponse& from) {
  GenericErrorResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericErrorResponse::CopyFrom(const GenericErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericErrorResponse::IsInitialized() const {
  return true;
}

void GenericErrorResponse::InternalSwap(GenericErrorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, lhs_arena,
                                       &other->_impl_.error_, rhs_arena);
}

std::string GenericErrorResponse::GetTypeName() const {
  return "GameWorkstore.AsyncNetworkEngine.GenericErrorResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameWorkstore::AsyncNetworkEngine::GenericRequest*
Arena::CreateMaybeMessage< ::GameWorkstore::AsyncNetworkEngine::GenericRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWorkstore::AsyncNetworkEngine::GenericRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameWorkstore::AsyncNetworkEngine::GenericResponse*
Arena::CreateMaybeMessage< ::GameWorkstore::AsyncNetworkEngine::GenericResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWorkstore::AsyncNetworkEngine::GenericResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse*
Arena::CreateMaybeMessage< ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
