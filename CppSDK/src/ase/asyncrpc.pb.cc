// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asyncrpc.proto

#include "asyncrpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace GameWorkstore {
namespace AsyncNetworkEngine {
constexpr GenericRequest::GenericRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messege_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenericRequestDefaultTypeInternal {
  constexpr GenericRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericRequestDefaultTypeInternal() {}
  union {
    GenericRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
constexpr GenericResponse::GenericResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messege_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenericResponseDefaultTypeInternal {
  constexpr GenericResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericResponseDefaultTypeInternal() {}
  union {
    GenericResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericResponseDefaultTypeInternal _GenericResponse_default_instance_;
constexpr GenericErrorResponse::GenericErrorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenericErrorResponseDefaultTypeInternal {
  constexpr GenericErrorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericErrorResponseDefaultTypeInternal() {}
  union {
    GenericErrorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericErrorResponseDefaultTypeInternal _GenericErrorResponse_default_instance_;
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore
namespace GameWorkstore {
namespace AsyncNetworkEngine {
bool Transmission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 200:
    case 204:
    case 400:
    case 401:
    case 403:
    case 405:
    case 408:
    case 421:
    case 500:
    case 501:
    case 511:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Transmission_strings[15] = {};

static const char Transmission_names[] =
  "ErrorConnection"
  "ErrorDecode"
  "ErrorEncode"
  "ErrorForbidden"
  "ErrorInternalServer"
  "ErrorMethodNotAllowed"
  "ErrorNetworkAuthenticationRequired"
  "ErrorNoData"
  "ErrorNotImplemented"
  "ErrorParser"
  "ErrorProtocol"
  "ErrorRequestTimeout"
  "ErrorUnauthorized"
  "NotSpecified"
  "Success";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Transmission_entries[] = {
  { {Transmission_names + 0, 15}, 1 },
  { {Transmission_names + 15, 11}, 400 },
  { {Transmission_names + 26, 11}, 421 },
  { {Transmission_names + 37, 14}, 403 },
  { {Transmission_names + 51, 19}, 500 },
  { {Transmission_names + 70, 21}, 405 },
  { {Transmission_names + 91, 34}, 511 },
  { {Transmission_names + 125, 11}, 204 },
  { {Transmission_names + 136, 19}, 501 },
  { {Transmission_names + 155, 11}, 3 },
  { {Transmission_names + 166, 13}, 2 },
  { {Transmission_names + 179, 19}, 408 },
  { {Transmission_names + 198, 17}, 401 },
  { {Transmission_names + 215, 12}, 0 },
  { {Transmission_names + 227, 7}, 200 },
};

static const int Transmission_entries_by_number[] = {
  13, // 0 -> NotSpecified
  0, // 1 -> ErrorConnection
  10, // 2 -> ErrorProtocol
  9, // 3 -> ErrorParser
  14, // 200 -> Success
  7, // 204 -> ErrorNoData
  1, // 400 -> ErrorDecode
  12, // 401 -> ErrorUnauthorized
  3, // 403 -> ErrorForbidden
  5, // 405 -> ErrorMethodNotAllowed
  11, // 408 -> ErrorRequestTimeout
  2, // 421 -> ErrorEncode
  4, // 500 -> ErrorInternalServer
  8, // 501 -> ErrorNotImplemented
  6, // 511 -> ErrorNetworkAuthenticationRequired
};

const std::string& Transmission_Name(
    Transmission value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Transmission_entries,
          Transmission_entries_by_number,
          15, Transmission_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Transmission_entries,
      Transmission_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Transmission_strings[idx].get();
}
bool Transmission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transmission* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Transmission_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<Transmission>(int_value);
  }
  return success;
}

// ===================================================================

class GenericRequest::_Internal {
 public:
};

GenericRequest::GenericRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameWorkstore.AsyncNetworkEngine.GenericRequest)
}
GenericRequest::GenericRequest(const GenericRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  messege_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messege().empty()) {
    messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_messege(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:GameWorkstore.AsyncNetworkEngine.GenericRequest)
}

void GenericRequest::SharedCtor() {
messege_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericRequest::~GenericRequest() {
  // @@protoc_insertion_point(destructor:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GenericRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messege_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericRequest::ArenaDtor(void* object) {
  GenericRequest* _this = reinterpret_cast< GenericRequest* >(object);
  (void)_this;
}
void GenericRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messege_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Messege = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messege();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Messege = 1;
  if (this->messege().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messege().data(), static_cast<int>(this->_internal_messege().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  return target;
}

size_t GenericRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Messege = 1;
  if (this->messege().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messege());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericRequest*>(
      &from));
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.messege().size() > 0) {
    _internal_set_messege(from._internal_messege());
  }
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWorkstore.AsyncNetworkEngine.GenericRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {
  return true;
}

void GenericRequest::InternalSwap(GenericRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  messege_.Swap(&other->messege_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string GenericRequest::GetTypeName() const {
  return "GameWorkstore.AsyncNetworkEngine.GenericRequest";
}


// ===================================================================

class GenericResponse::_Internal {
 public:
};

GenericResponse::GenericResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameWorkstore.AsyncNetworkEngine.GenericResponse)
}
GenericResponse::GenericResponse(const GenericResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  messege_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messege().empty()) {
    messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_messege(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:GameWorkstore.AsyncNetworkEngine.GenericResponse)
}

void GenericResponse::SharedCtor() {
messege_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericResponse::~GenericResponse() {
  // @@protoc_insertion_point(destructor:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GenericResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messege_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericResponse::ArenaDtor(void* object) {
  GenericResponse* _this = reinterpret_cast< GenericResponse* >(object);
  (void)_this;
}
void GenericResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messege_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Messege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_messege();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Messege = 2;
  if (this->messege().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messege().data(), static_cast<int>(this->_internal_messege().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_messege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  return target;
}

size_t GenericResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Messege = 2;
  if (this->messege().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messege());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericResponse*>(
      &from));
}

void GenericResponse::MergeFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.messege().size() > 0) {
    _internal_set_messege(from._internal_messege());
  }
}

void GenericResponse::CopyFrom(const GenericResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWorkstore.AsyncNetworkEngine.GenericResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericResponse::IsInitialized() const {
  return true;
}

void GenericResponse::InternalSwap(GenericResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  messege_.Swap(&other->messege_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string GenericResponse::GetTypeName() const {
  return "GameWorkstore.AsyncNetworkEngine.GenericResponse";
}


// ===================================================================

class GenericErrorResponse::_Internal {
 public:
};

GenericErrorResponse::GenericErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
}
GenericErrorResponse::GenericErrorResponse(const GenericErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
}

void GenericErrorResponse::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenericErrorResponse::~GenericErrorResponse() {
  // @@protoc_insertion_point(destructor:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GenericErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericErrorResponse::ArenaDtor(void* object) {
  GenericErrorResponse* _this = reinterpret_cast< GenericErrorResponse* >(object);
  (void)_this;
}
void GenericErrorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Error = 1;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  return target;
}

size_t GenericErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericErrorResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericErrorResponse*>(
      &from));
}

void GenericErrorResponse::MergeFrom(const GenericErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
}

void GenericErrorResponse::CopyFrom(const GenericErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericErrorResponse::IsInitialized() const {
  return true;
}

void GenericErrorResponse::InternalSwap(GenericErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string GenericErrorResponse::GetTypeName() const {
  return "GameWorkstore.AsyncNetworkEngine.GenericErrorResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameWorkstore::AsyncNetworkEngine::GenericRequest* Arena::CreateMaybeMessage< ::GameWorkstore::AsyncNetworkEngine::GenericRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWorkstore::AsyncNetworkEngine::GenericRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GameWorkstore::AsyncNetworkEngine::GenericResponse* Arena::CreateMaybeMessage< ::GameWorkstore::AsyncNetworkEngine::GenericResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWorkstore::AsyncNetworkEngine::GenericResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse* Arena::CreateMaybeMessage< ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
