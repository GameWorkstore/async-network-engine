// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asyncrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_asyncrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_asyncrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_asyncrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_asyncrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace GameWorkstore {
namespace AsyncNetworkEngine {
class GenericErrorResponse;
struct GenericErrorResponseDefaultTypeInternal;
extern GenericErrorResponseDefaultTypeInternal _GenericErrorResponse_default_instance_;
class GenericRequest;
struct GenericRequestDefaultTypeInternal;
extern GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
class GenericResponse;
struct GenericResponseDefaultTypeInternal;
extern GenericResponseDefaultTypeInternal _GenericResponse_default_instance_;
}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore
PROTOBUF_NAMESPACE_OPEN
template<> ::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse* Arena::CreateMaybeMessage<::GameWorkstore::AsyncNetworkEngine::GenericErrorResponse>(Arena*);
template<> ::GameWorkstore::AsyncNetworkEngine::GenericRequest* Arena::CreateMaybeMessage<::GameWorkstore::AsyncNetworkEngine::GenericRequest>(Arena*);
template<> ::GameWorkstore::AsyncNetworkEngine::GenericResponse* Arena::CreateMaybeMessage<::GameWorkstore::AsyncNetworkEngine::GenericResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GameWorkstore {
namespace AsyncNetworkEngine {

enum Transmission : int {
  NotSpecified = 0,
  ErrorConnection = 1,
  ErrorProtocol = 2,
  ErrorParser = 3,
  Success = 200,
  ErrorNoData = 204,
  ErrorDecode = 400,
  ErrorUnauthorized = 401,
  ErrorForbidden = 403,
  ErrorMethodNotAllowed = 405,
  ErrorRequestTimeout = 408,
  ErrorEncode = 421,
  ErrorInternalServer = 500,
  ErrorNotImplemented = 501,
  ErrorNetworkAuthenticationRequired = 511,
  Transmission_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Transmission_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Transmission_IsValid(int value);
constexpr Transmission Transmission_MIN = NotSpecified;
constexpr Transmission Transmission_MAX = ErrorNetworkAuthenticationRequired;
constexpr int Transmission_ARRAYSIZE = Transmission_MAX + 1;

const std::string& Transmission_Name(Transmission value);
template<typename T>
inline const std::string& Transmission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transmission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transmission_Name.");
  return Transmission_Name(static_cast<Transmission>(enum_t_value));
}
bool Transmission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transmission* value);
// ===================================================================

class GenericRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameWorkstore.AsyncNetworkEngine.GenericRequest) */ {
 public:
  inline GenericRequest() : GenericRequest(nullptr) {}
  virtual ~GenericRequest();
  explicit constexpr GenericRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericRequest(const GenericRequest& from);
  GenericRequest(GenericRequest&& from) noexcept
    : GenericRequest() {
    *this = ::std::move(from);
  }

  inline GenericRequest& operator=(const GenericRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericRequest& operator=(GenericRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GenericRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericRequest* internal_default_instance() {
    return reinterpret_cast<const GenericRequest*>(
               &_GenericRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericRequest& a, GenericRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericRequest* New() const final {
    return CreateMaybeMessage<GenericRequest>(nullptr);
  }

  GenericRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericRequest& from);
  void MergeFrom(const GenericRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameWorkstore.AsyncNetworkEngine.GenericRequest";
  }
  protected:
  explicit GenericRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessegeFieldNumber = 1,
  };
  // string Messege = 1;
  void clear_messege();
  const std::string& messege() const;
  void set_messege(const std::string& value);
  void set_messege(std::string&& value);
  void set_messege(const char* value);
  void set_messege(const char* value, size_t size);
  std::string* mutable_messege();
  std::string* release_messege();
  void set_allocated_messege(std::string* messege);
  private:
  const std::string& _internal_messege() const;
  void _internal_set_messege(const std::string& value);
  std::string* _internal_mutable_messege();
  public:

  // @@protoc_insertion_point(class_scope:GameWorkstore.AsyncNetworkEngine.GenericRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messege_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_asyncrpc_2eproto;
};
// -------------------------------------------------------------------

class GenericResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameWorkstore.AsyncNetworkEngine.GenericResponse) */ {
 public:
  inline GenericResponse() : GenericResponse(nullptr) {}
  virtual ~GenericResponse();
  explicit constexpr GenericResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericResponse(const GenericResponse& from);
  GenericResponse(GenericResponse&& from) noexcept
    : GenericResponse() {
    *this = ::std::move(from);
  }

  inline GenericResponse& operator=(const GenericResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericResponse& operator=(GenericResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GenericResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericResponse* internal_default_instance() {
    return reinterpret_cast<const GenericResponse*>(
               &_GenericResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericResponse& a, GenericResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericResponse* New() const final {
    return CreateMaybeMessage<GenericResponse>(nullptr);
  }

  GenericResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericResponse& from);
  void MergeFrom(const GenericResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameWorkstore.AsyncNetworkEngine.GenericResponse";
  }
  protected:
  explicit GenericResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessegeFieldNumber = 2,
  };
  // string Messege = 2;
  void clear_messege();
  const std::string& messege() const;
  void set_messege(const std::string& value);
  void set_messege(std::string&& value);
  void set_messege(const char* value);
  void set_messege(const char* value, size_t size);
  std::string* mutable_messege();
  std::string* release_messege();
  void set_allocated_messege(std::string* messege);
  private:
  const std::string& _internal_messege() const;
  void _internal_set_messege(const std::string& value);
  std::string* _internal_mutable_messege();
  public:

  // @@protoc_insertion_point(class_scope:GameWorkstore.AsyncNetworkEngine.GenericResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messege_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_asyncrpc_2eproto;
};
// -------------------------------------------------------------------

class GenericErrorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse) */ {
 public:
  inline GenericErrorResponse() : GenericErrorResponse(nullptr) {}
  virtual ~GenericErrorResponse();
  explicit constexpr GenericErrorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericErrorResponse(const GenericErrorResponse& from);
  GenericErrorResponse(GenericErrorResponse&& from) noexcept
    : GenericErrorResponse() {
    *this = ::std::move(from);
  }

  inline GenericErrorResponse& operator=(const GenericErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericErrorResponse& operator=(GenericErrorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GenericErrorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericErrorResponse* internal_default_instance() {
    return reinterpret_cast<const GenericErrorResponse*>(
               &_GenericErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenericErrorResponse& a, GenericErrorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericErrorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericErrorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericErrorResponse* New() const final {
    return CreateMaybeMessage<GenericErrorResponse>(nullptr);
  }

  GenericErrorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericErrorResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericErrorResponse& from);
  void MergeFrom(const GenericErrorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericErrorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameWorkstore.AsyncNetworkEngine.GenericErrorResponse";
  }
  protected:
  explicit GenericErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string Error = 1;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_asyncrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericRequest

// string Messege = 1;
inline void GenericRequest::clear_messege() {
  messege_.ClearToEmpty();
}
inline const std::string& GenericRequest::messege() const {
  // @@protoc_insertion_point(field_get:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
  return _internal_messege();
}
inline void GenericRequest::set_messege(const std::string& value) {
  _internal_set_messege(value);
  // @@protoc_insertion_point(field_set:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}
inline std::string* GenericRequest::mutable_messege() {
  // @@protoc_insertion_point(field_mutable:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
  return _internal_mutable_messege();
}
inline const std::string& GenericRequest::_internal_messege() const {
  return messege_.Get();
}
inline void GenericRequest::_internal_set_messege(const std::string& value) {
  
  messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenericRequest::set_messege(std::string&& value) {
  
  messege_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}
inline void GenericRequest::set_messege(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}
inline void GenericRequest::set_messege(const char* value,
    size_t size) {
  
  messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}
inline std::string* GenericRequest::_internal_mutable_messege() {
  
  return messege_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenericRequest::release_messege() {
  // @@protoc_insertion_point(field_release:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
  return messege_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenericRequest::set_allocated_messege(std::string* messege) {
  if (messege != nullptr) {
    
  } else {
    
  }
  messege_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messege,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GameWorkstore.AsyncNetworkEngine.GenericRequest.Messege)
}

// -------------------------------------------------------------------

// GenericResponse

// string Messege = 2;
inline void GenericResponse::clear_messege() {
  messege_.ClearToEmpty();
}
inline const std::string& GenericResponse::messege() const {
  // @@protoc_insertion_point(field_get:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
  return _internal_messege();
}
inline void GenericResponse::set_messege(const std::string& value) {
  _internal_set_messege(value);
  // @@protoc_insertion_point(field_set:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}
inline std::string* GenericResponse::mutable_messege() {
  // @@protoc_insertion_point(field_mutable:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
  return _internal_mutable_messege();
}
inline const std::string& GenericResponse::_internal_messege() const {
  return messege_.Get();
}
inline void GenericResponse::_internal_set_messege(const std::string& value) {
  
  messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenericResponse::set_messege(std::string&& value) {
  
  messege_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}
inline void GenericResponse::set_messege(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}
inline void GenericResponse::set_messege(const char* value,
    size_t size) {
  
  messege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}
inline std::string* GenericResponse::_internal_mutable_messege() {
  
  return messege_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenericResponse::release_messege() {
  // @@protoc_insertion_point(field_release:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
  return messege_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenericResponse::set_allocated_messege(std::string* messege) {
  if (messege != nullptr) {
    
  } else {
    
  }
  messege_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messege,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GameWorkstore.AsyncNetworkEngine.GenericResponse.Messege)
}

// -------------------------------------------------------------------

// GenericErrorResponse

// string Error = 1;
inline void GenericErrorResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& GenericErrorResponse::error() const {
  // @@protoc_insertion_point(field_get:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
  return _internal_error();
}
inline void GenericErrorResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}
inline std::string* GenericErrorResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
  return _internal_mutable_error();
}
inline const std::string& GenericErrorResponse::_internal_error() const {
  return error_.Get();
}
inline void GenericErrorResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenericErrorResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}
inline void GenericErrorResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}
inline void GenericErrorResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}
inline std::string* GenericErrorResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenericErrorResponse::release_error() {
  // @@protoc_insertion_point(field_release:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenericErrorResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GameWorkstore.AsyncNetworkEngine.GenericErrorResponse.Error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AsyncNetworkEngine
}  // namespace GameWorkstore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameWorkstore::AsyncNetworkEngine::Transmission> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_asyncrpc_2eproto
