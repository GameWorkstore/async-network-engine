name: UPM Sync
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Config
        run: |
          git config --local user.email "contact@gameworkstore.com"
          git config --local user.name "game-workstore-bot"
      
      - name: Update README
        run: |
          if ! cmp --silent "README.md" "Assets/Package/README.md"; then
              echo "different"
              cp -f README.md Assets/Package/README.md
              git add --a
              git commit -m "Updated README.md"
              git push origin
          fi

      - name: Cook UPM
        run: |
          git checkout main
          git subtree split -P Assets/Package/ -b upm
          git checkout upm
          ls

      - name: Push UPM
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: upm
          force: true

      - name: Cook Go Module
        run: |
          git checkout main

      - name: Push downstream aws-network-engine-go package
        uses: NxtLvLSoftware/git-subtree-action@1.1
        with:
          repo: GameWorkstore/async-network-engine-go
          path: Assets/GoModule
          deploy_key: ${{ secrets.ASYNC_ENGINE_GO_DEPLOY_KEY }}
          force: true
          branch: main
  upload_gcp:
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v2
      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICEACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Deploy GCP test function
        run: |
          cd Assets/Tests/GCP/
          gcloud functions deploy gcptest --memory=128 --entry-point Process --runtime go113 --trigger-http --allow-unauthenticated
          gcloud functions deploy gcptest-notauthorized --memory=128 --entry-point Process --runtime go113 --trigger-http
  upload_aws:
    runs-on: ubuntu-latest
    if: false
    env:
      BACKEND_BUCKET: ase-test-bucket
    steps:
      - uses: actions/checkout@v2
      - name: Set Code Version
        id: codeversion
        run: |
          echo "::set-output name=zipname::main-${{ github.run_number }}.zip"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SERVICE_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SERVICE_SECRET_KEY }}
          aws-region: us-east-1

      - name: Deploy S3 Stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: aws-test-builds
          template: Assets/Tests/AWS/Cloud/cf_builds.yaml
          parameter-overrides: 'BackendBucket=${{ env.BACKEND_BUCKET }}'
          no-fail-on-empty-changeset: "1"

      - uses: shallwefootball/s3-upload-action@master
        name: Upload Lambda to S3
        with:
          aws_key_id: ${{ secrets.AWS_SERVICE_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SERVICE_SECRET_KEY }}
          aws_bucket: ${{ env.BACKEND_BUCKET }}
          source_dir: Assets/Tests/AWS/Cloud/Templates
          destination_dir: ''

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
          stable: true

      - name: Build Lambda and Cook
        run: |
          mkdir Staging
          cd Assets/Tests/AWS/Lambda/
          go get -d ./...
          GOOS=linux GOARCH=amd64 go build -o main .
          zip ../../../../Staging/${{ steps.codeversion.outputs.zipname }} main
      
      - uses: shallwefootball/s3-upload-action@master
        name: Upload Lambda to S3
        with:
          aws_key_id: ${{ secrets.AWS_SERVICE_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SERVICE_SECRET_KEY }}
          aws_bucket: ${{ env.BACKEND_BUCKET }}
          source_dir: 'Staging'
          destination_dir: ''
      
      - name: Deploy CloudFormation Stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: aws-test-serverless
          template: Assets/Tests/AWS/Cloud/cf_serverless.yaml
          parameter-overrides: "BackendBucket=${{ env.BACKEND_BUCKET }},FunctionBuild=${{ steps.codeversion.outputs.zipname }}"        